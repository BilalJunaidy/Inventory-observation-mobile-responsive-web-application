# Generated by Django 3.1.4 on 2020-12-18 11:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import observe.helpers
import observe.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clientID', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagementID', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagements', to='observe.client')),
            ],
        ),
        migrations.CreateModel(
            name='Enterprise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StockCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stockcounts', to='observe.client')),
                ('engagement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stockcounts', to='observe.engagement')),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stockcounts', to='observe.enterprise')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UploadedFile', models.FileField(max_length=500, upload_to=observe.helpers.file_upload_location, validators=[observe.validators.validate_file_extension], verbose_name='Upload Inventory Listing')),
                ('RowInvStart', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1048576)], verbose_name='Row Number for where the Listing starts')),
                ('SKUColumn', models.CharField(max_length=3, verbose_name='Column which holds the unique SKU/Product code')),
                ('ProductNameColumn', models.CharField(blank=True, max_length=3, null=True, verbose_name='Column which holds the Product Name')),
                ('ProductCategoryColumn', models.CharField(blank=True, max_length=3, null=True, verbose_name='Column which holds the Product category')),
                ('ProductDescriptionColumn', models.CharField(blank=True, max_length=3, null=True, verbose_name='Column which holds the Product description')),
                ('QuanityColumn', models.CharField(max_length=3, verbose_name='Column which holds the Quantity at hand')),
                ('ValueColumn', models.CharField(blank=True, max_length=3, null=True, verbose_name='Column which holds the unit price for the products')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventorylists', to='observe.client')),
                ('engagement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventorylists', to='observe.engagement')),
                ('enterprise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventorylists', to='observe.enterprise')),
                ('stockcount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventorylists', to='observe.stockcount')),
            ],
        ),
        migrations.AddField(
            model_name='engagement',
            name='enterprise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagements', to='observe.enterprise'),
        ),
        migrations.AddField(
            model_name='client',
            name='enterprise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='observe.enterprise'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
